<style>
/*table {
    font-family: arial, sans-serif;
      border-collapse: collapse;
        width: 100%;
}

td, th {
    border: 1px solid #dddddd;
      text-align: left;
        padding: 8px;
}

tr:nth-child(even) {
    background-color: #dddddd;
}*/
</style>
<style>
body {
  font-family: Arial, Helvetica, sans-serif;
}

h1 {
  padding: 10px 0 0 10px;
  text-align: center;
  color: #444;
  font-size: 30pt;
}

h4 {
  font-size: 20pt;
}

img {
  border-radius: 5px 5px 0 0;
}

table {
  border: 2px solid black;
  border-collapse: collapse;
  margin-bottom: 20px;
  margin-right: 20px;
  display: inline-table;
}

td {
  border: 2px solid black;
  padding: 3px;
  font-size: 13pt;
}

tr {
  border: none;
}

th {
  font-size: 17pt;
}

.card {
  /* Add shadows to create the "card" effect */
  box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
  transition: 0.3s;
  border-radius: 10px; /* 5px rounded corners */
}

/* On mouse-over, add a deeper shadow */
.card:hover {
  box-shadow: 0 8px 16px 0 rgba(0,0,0,0.2);
}

/* Add some padding inside the card container */
.container {
  padding: 2px 16px;
  text-align: center;
}


.flex {
  --spacing: 4px;
  --direction: row;
  --align: center;
  display: flex;
  justify-content: space-between;
  align-items: var(--align);
  flex-direction: var(--direction);
}

/* Adjust the spacing of all (immediate) inner children */
.flex > * + * {
  margin-left: var(--spacing);
}

/* Horizontally stack items in line. */
.hstack {
  --direction: row;
}

.hstack:nth-child(even) {
  background-color: #dddddd;
}

/* Vertically stack items on top of each other. */
.vstack {
  --align: stretch;
  --direction: column;
}
/* Adjust spacing for vertically stacking items */
.vstack > * + * {
  margin-left: unset;
  margin-top: var(--spacing);
}


/* Adaptive take up space within a stack, used for content or for pushing items. */
.spacer {
  flex: 1;
}

/* MODIFIERS */
/* Adjusts spacing between items */
.--sp1 {
  --spacing: calc(var(--grid) * 1);
}
.--sp2 {
  --spacing: calc(var(--grid) * 2);
}
.--sp3 {
  --spacing: calc(var(--grid) * 3);
}
.--sp4 {
  --spacing: calc(var(--grid) * 4);
}
.--sp5 {
  --spacing: calc(var(--grid) * 5);
}
.--sp6 {
  --spacing: calc(var(--grid) * 6);
}

/* Adjusts alignment of items within a stack. */
.--top {
  --align: flex-start;
}
.--left {
  justify-content: flex-start;
}
.--center {
  justify-content: center;
}
.--right {
  justify-content: flex-end;
}
.--edge {
  justify-content: space-between;
}

/* Vertically center items in a VStack */
.--v-center {
  --align: center;
}

/* RESPONSIVE */
/* Responsive styles to swap between HStack and VStack for tablet/desktop */
@media (min-width: 40em) {
  .vstack\@md {
    --align: stretch;
    --direction: column;
  }
  .vstack\@md > * + * {
    margin-left: unset;
    margin-top: var(--spacing);
  }
}
@media (min-width: 60em) {
  .vstack\@lg {
    --align: stretch;
    --direction: column;
  }
  .vstack\@lg > * + * {
    margin-left: unset;
    margin-top: var(--spacing);
  }
}
</style>

% from itertools import compress
% from config import assessment_dict, assessment_folder_dict
% from assessments import drops, percentage

<h1>Scoreboard for game {{key}}</h1>
<div class="flex hstack">
  <div class="flex vstack">
    <div class="card">
      <div class="container">
        <h4><strong>Game 1</strong></h4> 
        <table>
          <tr>
            <th colspan="2"><strong>Fastest</strong></th>
          </tr>
          % for index, row in enumerate(game_assessments):
            <tr>
              <td>{{row.onyen}}</td>
              <td>{{row.elapsed_time}}</td>
            </tr>
            % if index > 4: break
          % end
        </table>
      </div>
    </div>
  </div>
  <div class="flex vstack">
    <div class="card">
      <div class="container">
        <h4><strong>Game 4</strong></h4>
        <table>
          <tr>
            <th colspan="2"><strong>Fastest</strong></th>
          </tr>
          % for index, row in enumerate(game_assessments):
            <tr>
              <td>{{row.onyen}}</td>
              <td>{{row.elapsed_time}}</td>
            </tr>
            % if index > 4: break
          % end
        </table>
      </div>
    </div>
  </div>
</div>

<!-- <table>
  <tr>
    <th>item number</th>
    <th>submit id</th>
    <th>onyen</th>
    <th>score</th>
    <th>msg</th>
    <th>points total</th>
    <th>elapsed time</th>
  </tr>  
  % for index, row in enumerate(game_assessments):
      <tr>
        <th>{{index+1}}</th>
        <th>{{row.id}}</th>
        <th>{{row.onyen}}</th>
        <th>{{row.score}}</th>
        <th>{{row.msg}}</th>
        <th>{{row.points_total}}</th>
        <th>{{row.elapsed_time}}</th>
      </tr>
  % end
</table> -->

% rebase('assessment.base')
